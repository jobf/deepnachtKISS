package engine;

import peote.view.Texture;
import peote.view.TextureData;

/** see haxe cookbook on vga fonts - https://code.haxe.org/category/other/vga-text-renderer.html **/

abstract FontVGA(Texture) to Texture {
	public function new() {
		var char_count = 128;
		var columns = 8;
		var rows = Std.int(char_count / columns);
		var char_size = 8;
		var width = columns * char_size;
		var height = rows * char_size;

		// prepare texture data
		var texture_data = new TextureData(width, height);

		// loop every character code that is defined
		for (char_code in 0...char_count) {

			// determine the top left co-ordinate to begin plotting the character pixels
			var column = char_code % columns;
			var row = Std.int(char_code / columns);
			var tile_x = column * char_size;
			var tile_y = row * char_size;

			// determine the index of the top y of the character
			var top = char_code << 3;

			// loop every line in the character
			for (y in 0...char_size) {
				var line = data[top + y];

				// isolate each bit in the line
				for (x in 0...char_size) {
					var bit = (line << x) & 0x80;

					// set pixel to be white or transparent
					var rgba = (bit == 0x80) ? 0xffffffFF : 0x00000000;
					texture_data.setColor(tile_x + x, tile_y + y, rgba);
				}
			}
		}

		// set up the Texture from the prepared data 
		this = Texture.fromData(texture_data);
		this.tilesX = columns;
		this.tilesY = rows;
	}

	static var data:Array<Int> = [
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 000  0x00  NUL  Null character
		0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E, // 001  0x01  SOH  Start of Heading
		0x7E, 0xFF, 0x00, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E, // 002  0x02  STX  Start of Text
		0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00, // 003  0x03  ETX  End of Text
		0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00, // 004  0x04  EOT  End of Transmission
		0x38, 0x7C, 0x38, 0xFE, 0xFE, 0x92, 0x10, 0x7C, // 005  0x05  ENQ  Enquiry
		0x00, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x7C, // 006  0x06  ACK  Acknowledge
		0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00, // 007  0x07  BEL  Bell, Alert
		0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF, // 008  0x08  BS   Backspace
		0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00, // 009  0x09  HT   Horizontal Tab
		0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF, // 010  0x0A  LF   Line Feed
		0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78, // 011  0x0B  VT   Vertical Tabulation
		0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, // 012  0x0C  FF   Form Feed
		0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0, // 013  0x0D  CR   Carriage Return
		0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0, // 014  0x0E  SO   Shift Out
		0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99, // 015  0x0F  SI   Shift In
		0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00, // 016  0x10  DLE  Data Link Escape
		0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00, // 017  0x11  DC1  Device Control One (XON)
		0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18, // 018  0x12  DC2  Device Control Two
		0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00, // 019  0x13  DC3  Device Control Three (XOFF)
		0x7F, 0x00, 0x00, 0x7B, 0x1B, 0x1B, 0x1B, 0x00, // 020  0x14  DC4  Device Control Four
		0x3E, 0x63, 0x38, 0x6C, 0x6C, 0x38, 0x86, 0xFC, // 021  0x15  NAK  Negative Acknowledge
		0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00, // 022  0x16  SYN  Synchronous Idle
		0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF, // 023  0x17  ETB  End of Transmission Block
		0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00, // 024  0x18  CAN  Cancel
		0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00, // 025  0x19  EM   End of medium
		0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00, // 026  0x1A  SUB  Substitute
		0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00, // 027  0x1B  ESC  Escape
		0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00, // 028  0x1C  FS   File Separator
		0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00, // 029  0x1D  GS   Group Separator
		0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00, // 030  0x1E  RS   Record Separator
		0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00, // 031  0x1F  US   Unit Separator
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 032  0x20  SP   Space
		0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00, // 033  0x21  !    Exclamation mark
		0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, // 034  0x22  "    Double quotes (or speech marks)
		0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00, // 035  0x23  #    Number sign
		0x18, 0x7E, 0xC0, 0x7C, 0x06, 0xFC, 0x18, 0x00, // 036  0x24  $    Dollar
		0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00, // 037  0x25  %    Per cent sign
		0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00, // 038  0x26  &    Ampersand
		0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, // 039  0x27  '    Single quote
		0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00, // 040  0x28  (    Open parenthesis (or open bracket)
		0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00, // 041  0x29  )    Close parenthesis (or close bracket)
		0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, // 042  0x2A  *    Asterisk
		0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, // 043  0x2B  +    Plus
		0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, // 044  0x2C  ,    Comma
		0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, // 045  0x2D  -    Hyphen-minus
		0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, // 046  0x2E  .    Period, dot or full stop
		0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00, // 047  0x2F  /    Slash or divide
		0x7C, 0xCE, 0xDE, 0xF6, 0xE6, 0xC6, 0x7C, 0x00, // 048  0x30  0    Zero
		0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00, // 049  0x31  1    One
		0x78, 0xCC, 0x0C, 0x38, 0x60, 0xCC, 0xFC, 0x00, // 050  0x32  2    Two
		0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00, // 051  0x33  3    Three
		0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00, // 052  0x34  4    Four
		0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00, // 053  0x35  5    Five
		0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00, // 054  0x36  6    Six
		0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00, // 055  0x37  7    Seven
		0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00, // 056  0x38  8    Eight
		0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00, // 057  0x39  9    Nine
		0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, // 058  0x3A  :    Colon
		0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30, // 059  0x3B  ;    Semicolon
		0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00, // 060  0x3C  <    Less than (or open angled bracket)
		0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00, // 061  0x3D  =    Equals
		0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00, // 062  0x3E  >    Greater than (or close angled bracket)
		0x3C, 0x66, 0x0C, 0x18, 0x18, 0x00, 0x18, 0x00, // 063  0x3F  ?    Question mark
		0x7C, 0xC6, 0xDE, 0xDE, 0xDC, 0xC0, 0x7C, 0x00, // 064  0x40  @    At sign
		0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00, // 065  0x41  A    Uppercase A
		0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00, // 066  0x42  B    Uppercase B
		0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00, // 067  0x43  C    Uppercase C
		0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00, // 068  0x44  D    Uppercase D
		0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00, // 069  0x45  E    Uppercase E
		0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00, // 070  0x46  F    Uppercase F
		0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3A, 0x00, // 071  0x47  G    Uppercase G
		0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00, // 072  0x48  H    Uppercase H
		0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, // 073  0x49  I    Uppercase I
		0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00, // 074  0x4A  J    Uppercase J
		0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00, // 075  0x4B  K    Uppercase K
		0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00, // 076  0x4C  L    Uppercase L
		0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00, // 077  0x4D  M    Uppercase M
		0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00, // 078  0x4E  N    Uppercase N
		0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00, // 079  0x4F  O    Uppercase O
		0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00, // 080  0x50  P    Uppercase P
		0x7C, 0xC6, 0xC6, 0xC6, 0xD6, 0x7C, 0x0E, 0x00, // 081  0x51  Q    Uppercase Q
		0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00, // 082  0x52  R    Uppercase R
		0x7C, 0xC6, 0xE0, 0x78, 0x0E, 0xC6, 0x7C, 0x00, // 083  0x53  S    Uppercase S
		0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, // 084  0x54  T    Uppercase T
		0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x00, // 085  0x55  U    Uppercase U
		0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00, // 086  0x56  V    Uppercase V
		0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0x6C, 0x00, // 087  0x57  W    Uppercase W
		0xC6, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0xC6, 0x00, // 088  0x58  X    Uppercase X
		0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00, // 089  0x59  Y    Uppercase Y
		0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00, // 090  0x5A  Z    Uppercase Z
		0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00, // 091  0x5B  [    Opening bracket
		0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00, // 092  0x5C  \    Backslash
		0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00, // 093  0x5D  ]    Closing bracket
		0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, // 094  0x5E  ^    Caret - circumflex
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, // 095  0x5F  _    Underscore
		0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, // 096  0x60  `    Grave accent
		0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00, // 097  0x61  a    Lowercase a
		0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00, // 098  0x62  b    Lowercase b
		0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00, // 099  0x63  c    Lowercase c
		0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00, // 100  0x64  d    Lowercase d
		0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00, // 101  0x65  e    Lowercase e
		0x38, 0x6C, 0x64, 0xF0, 0x60, 0x60, 0xF0, 0x00, // 102  0x66  f    Lowercase f
		0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8, // 103  0x67  g    Lowercase g
		0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00, // 104  0x68  h    Lowercase h
		0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00, // 105  0x69  i    Lowercase i
		0x0C, 0x00, 0x1C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, // 106  0x6A  j    Lowercase j
		0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00, // 107  0x6B  k    Lowercase k
		0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, // 108  0x6C  l    Lowercase l
		0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xD6, 0x00, // 109  0x6D  m    Lowercase m
		0x00, 0x00, 0xB8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, // 110  0x6E  n    Lowercase n
		0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00, // 111  0x6F  o    Lowercase o
		0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0, // 112  0x70  p    Lowercase p
		0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E, // 113  0x71  q    Lowercase q
		0x00, 0x00, 0xDC, 0x76, 0x62, 0x60, 0xF0, 0x00, // 114  0x72  r    Lowercase r
		0x00, 0x00, 0x7C, 0xC0, 0x70, 0x1C, 0xF8, 0x00, // 115  0x73  s    Lowercase s
		0x10, 0x30, 0xFC, 0x30, 0x30, 0x34, 0x18, 0x00, // 116  0x74  t    Lowercase t
		0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, // 117  0x75  u    Lowercase u
		0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00, // 118  0x76  v    Lowercase v
		0x00, 0x00, 0xC6, 0xC6, 0xD6, 0xFE, 0x6C, 0x00, // 119  0x77  w    Lowercase w
		0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00, // 120  0x78  x    Lowercase x
		0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8, // 121  0x79  y    Lowercase y
		0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00, // 122  0x7A  z    Lowercase z
		0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00, // 123  0x7B  {    Opening brace
		0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00, // 124  0x7C  |    Vertical bar
		0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00, // 125  0x7D  }    Closing brace
		0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 126  0x7E  ~    Equivalency sign - tilde
		0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00  // 127  0x7F  DEL  Delete
	];
}
